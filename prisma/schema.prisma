generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Place {
    id                       String        @id @default(cuid())
    businessStatus           String?
    city                     String
    formattedAddress         String
    googleId                 String?
    googleMapsUri            String?
    internationalPhoneNumber String?
    name                     String
    openingHours             OpeningHour[]
    rating                   Float?
    reviews                  Review[]
    userRatingCount          Int?
    websiteUri               String?
}

model OpeningHour {
    id          String @id @default(cuid())
    closeHour   Int
    closeMinute Int
    day         Int
    startHour   Int
    startMinute Int

    placeId String
    place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model Review {
    id             String   @id @default(cuid())
    authorName     String
    authorPhotoUri String?
    publishedAt    DateTime
    rating         Int?
    text           String?

    placeId String
    place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
}
